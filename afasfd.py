import random

def main():
    qa = [
        (
            "Большие данные, их характеристики. Примеры больших данных. Источники больших данных.",
            "Наборы данных, объём и/или скорость поступления которых выходят за пределы возможностей традиционных СУБД. Классические 5 V: Volume – объём, Velocity – высокая скорость генерации/обновления, Variety – разнородные форматы, Veracity – точность/целостность/достоверность данных, Value – то, насколько хранящиеся данные ценные и какую ценность из них можно извлечь. Примеры: логи соцсетей, потоковые котировки бирж. Источники: социальные сети, биржи, медицинские учреждения, промышленные компании, биг тех и фин тех компании."
        ),
        (
            "Задачи обработки больших данных и специалисты области больших данных.",
            "Задачи: сбор, очистка и ETL (извлечение, преобразование, загрузка), хранение в распределённых системах, пакетная и потоковая обработка, обучение моделей машинного обучения, визуализация, обеспечение качества и безопасности данных. Специалисты: Data Engineer, ML Engineer / Data Scientist, Data Analyst / BI-разработчик, Data Architect, DevOps / SRE."
        ),
        (
            "Вычислительные устройства, характеристики, виды и типы. Вычислительные инфраструктуры.",
            "Устройства: CPU – универсальные, низкая параллельность; GPU – тысячи ядер для матричных операций; ASIC – узкоспециализированные интегральные схемы, например для майнинга; Суперкомпьютеры, мейнфреймы, телефоны, пк и тд. Характеристики: количество ядер, тактовая частота, производительность, размеры, вес, энергоэффективность, эффективность памяти, пропускная способность шины и сети. Инфраструктуры: on-prem кластеры, когда ресурсы размещаются и управляются внутри компании; HPC-кластеры (высокопроизводительные вычислительные кластеры); публичные и частные облака; edge-вычисления, когда обработка данных происходит близко к месту их генерирования."
        ),
        (
            "Типы данных. Особенности каждого типа.",
            "Числовые (int, float) – поддерживают арифметические и статистические операции; категориальные – фиксированный набор значений, частотный анализ, one-hot encoding; порядковые – упорядоченные, но без равных интервалов, например рейтинги; текст – неструктурированная последовательность символов, требует методов обработки естественного языка; временные ряды – измерения во времени, анализ сезонности и трендов; пространственные – координаты и геометрические формы, топологические операции; мультимедиа – изображения, аудио, видео, высокая размерность; графовые – вершины и рёбра, анализ связей и центральности."
        ),
        (
            "Структурированные, неструктурированные и полуструктурированные данные. Характеристика и их особенности.",
            "Структурированные данные – с фиксированной схемой, таблицы SQL, строгие типы, быстрые запросы. Полуструктурированные данные – схема хранится внутри данных, например JSON или XML, схема-on-read, гибкость. Неструктурированные данные – без явной схемы, текст и медиа-файлы, требуют извлечения признаков и метаданных."
        ),
        (
            "Конвейер больших данных. Задачи и особенности этапов.",
            "Конвейер больших данных: ingestion – приём данных батчами или стримами; хранение – Data Warehouse для структурированных данных и Data Lake для любых данных; обработка – пакетная (например Spark) и потоковая (например Flink); аналитика и ML – построение отчётов и моделей; сервис-прослойка – API, OLAP для выдачи результатов. Особенности: горизонтальное масштабирование, устойчивость к сбоям, разделение хранения и вычислений."
        ),
        (
            "API как средство получения данных.",
            "Множество источников данные предоставляют API для работы с ними, в частности это можно делать с помощью REST, GraphQL, gRPC предоставляют стандартизированный доступ к ресурсам через HTTP/HTTP2. Форматы данных – JSON, Protobuf; авторизация – OAuth, JWT; ограничения частоты запросов (rate limit) (можно настроить по расписанию) и пагинация для работы с большими объёмами данных (причём строго структурированных за счёт JSON,XML и тд)."
        ),
        (
            "Подходы для взаимодействия между сервисами и клиентами.",
            "REST – CRUD через HTTP-методы, слабая связанность; RPC, gRPC, Thrift – бинарные протоколы, низкая задержка; SOAP – XML-сообщения, жёсткая схема; WebSocket – двусторонний канал в реальном времени; event-driven – pub/sub через очереди, например Kafka или RabbitMQ. Выбор зависит от требований к скорости, надёжности и совместимости."
        ),
        (
            "Сервисы очередей. Классические реализации. Реализация Kafka.",
            "Сервисы очередей - это как бы посредник для обмена сообщениями между разными частями приложения. Классические: RabbitMQ, Amazon SQS, Redis Streams – все они работают как почтовая фирма, обычная реализация точка-точка, издатель-подписчик. Kafka: это такая система как бы почтовых отделений, которая как бы собирает события всех наших систем или логов приложений в один непрерывный журнал (commit-log), позволяющий читать от туда данные с любой задержкой. Этот журнал хранит надёжно данные на нескольких кластерах, а если нужна больше пропускная способность просто добавим новые кластеры. Это очень гибкая система, встраиваемая почти в любую структуру"
        ),
        (
            "Основные понятия баз данных и СУБД.",
            "База данных – упорядоченный набор связанных данных. СУБД – ПО для создания, хранения, модификации и обеспечения безопасности данных. Понятия: таблица (или коллекция), строка (запись), столбец (поле), индекс для ускорения запросов, транзакция с ACID, язык запросов (SQL, Cypher и др.), уровни изоляции."
        ),
        (
            "Реляционные СУБД. Ключи и связи таблиц.",
            "Реляционная СУБД (система управления реляционными базами данных) – это программное обеспечение, которое позволяет организовать данные в виде таблиц, где каждая таблица состоит из строк (записей) и столбцов (атрибутов). Первичный ключ – уникальный идентификатор записи. Внешний ключ – ссылка на первичный ключ другой таблицы, обеспечивает целостность. Связи: один-к-одному, один-ко-многим, многие-ко-многим (через промежуточную таблицу). Нормальные формы устраняют избыточность и аномалии обновления."
        ),
        (
            "Схемы баз данных. Нормальные формы. Примеры приведения исходных данных к нормальным формам.",
            "Схема БД – описание таблиц, полей и связей. 1НФ – есть PK, все значения атомарны, то есть в одной ячейке не должно быть списка из значений. 2НФ – отсутствие частичных зависимостей при составном ключе, то есть если в таблице есть составной PK, а какое-то значение зависит только от одного из их, надо выносить всё. 3НФ – отсутствие транзитивных зависимостей. Пример: таблицу Заказы с повторяющимися товарами и городом который зависит от заказщика разбивают на Заказы(ЗаказID, Заказщик),  Позиции(ЗаказID, Товар), доставка(Заказщик, город)."
        ),
        (
            "Хранилища данных. Паттерны проектирования систем хранения данных.",
            "Data Warehouse для исторической аналитики. Паттерны: «звезда» – таблица фактов + измерения; «снежинка» – нормализованные измерения; Data Vault – хабы, линк-таблицы и сателлиты; Lakehouse – файловое озеро с метаданными и поддержкой ACID (Delta, Iceberg)."
        ),
        (
            "SQL в реляционных СУБД.",
            "Декларативный язык: DDL – определение структур (CREATE, ALTER, DROP); DML – работа с данными (SELECT, INSERT, UPDATE, DELETE); DCL – управление доступом; TCL – управление транзакциями (COMMIT, ROLLBACK)."
        ),
        (
            "Подмодуль языка SQL – DML. Основные операторы, их структура и примеры реализации.",
            "SELECT … FROM … WHERE … для чтения. INSERT INTO Таблица(…) VALUES(…) для вставки. UPDATE Таблица SET … WHERE … для обновления. DELETE FROM Таблица WHERE … для удаления. MERGE для upsert (если есть – UPDATE, иначе INSERT)."
        ),
        (
            "Транзакции в СУБД. Принцип ACID. TCL. Примеры реализации.",
            "Транзакция – группа операций как единое целло. ACID: атомарность, согласованность, изолированность, надёжность. TCL: BEGIN (или START TRANSACTION), COMMIT, ROLLBACK."
        ),
        (
            "Трансформация данных.",
            "Изменение формата, фильтрация, объединение, агрегирование, pivot, стандартизация, шифрование и масштабирование. Выполняется в ETL или ELT."
        ),
        (
            "Шкалы данных. Свойства и особенности шкал данных.",
            "Номинальная - Используется для категоризации данных, когда элементы можно разделить на группы, но нет никакого порядка или ранжирования между ними. Например, цвета (красный, синий, зеленый) . Порядковая – Позволяет ранжировать данные по степени выраженности какого-либо свойства, но не указывает на величину разницы между элементами. Например место в рейтинге. Интервальная – Обеспечивает возможность сравнения разницы между значениями, но не имеет фиксированной нулевой точки. Например, температура в градусах Цельсия или Фаренгейта. Отношения – Наиболее информативная шкала, позволяющая как сравнивать разницу между значениями, так и оценивать пропорции, так как имеет фиксированную нулевую точку. Например, рост, вес, возраст, деньги. Дихотомическая – две категории."
        ),
        (
            "Чистые и грязные данные. Процесс очистки.",
            "Грязные данные – опечатки, дубли, пропуски, некорректные значения. Очистка: профайлинг и правила, нормализация регистра, удаление дубликатов, заполнение пропусков, сверка по справочникам, документация изменений."
        ),
        (
            "Профайлинг данных.",
            "Анализ характеристик данных: размер, типы, уникальные значения, min/max, частотный анализ, регулярные выражения, проверка ссылочной целсти. Позволяет оценить качество и спланировать очистку."
        ),
        (
            "Стратегии борьбы с пропусками. Работа с выбросами и экстремальными значениями.",
            "Пропуски: удаление строк/столбцов, заполнение средним/медианой/модой, прогнозирование моделей. Выбросы: винзоризация, лог-преобразование, фильтрация по z-оценке, сохранение при бизнес-важности."
        ),
        (
            "Обработка данных. Фильтрация, сортировка, агрегация, дискретизация и квантование данных.",
            "Фильтрация – отбор по условию. Сортировка – ORDER BY. Агрегация – GROUP BY и функции SUM, AVG и др. Дискретизация – бининги. Квантование – перевод чисел в фиксированные уровни."
        ),
        (
            "Обогащение данных. Виды обогащения.",
            "Обогащение данных - это процесс улучшения и дополнения существующих данных новой информацией для повышения их ценности и полезности. Внутреннее – получение новой информации посредством манипуляций с уже существующими данными. Внешнее – присоединение открытых источников: погода, курсы валют, геокоординаты."
        ),
        (
            "Объединение данных в РСУБД. Виды соединений, их особенности и примеры реализации.",
            "INNER JOIN – пересечение. LEFT JOIN – все из левой и совпадающие из правой. RIGHT JOIN – зеркальный LEFT. FULL JOIN – все из обеих. CROSS JOIN – декартово произведение. SELF JOIN – таблица сама с собой."
        ),
        (
            "ELT и ETL процессы при обработке больших данных.",
            "ETL – Extract, Transform, Load: преобразование до загрузки в DWH. Менее гибкая так как требует предварительной обработки, но зато строгий контроль и все вытекающее из этого. ELT – Extract, Load, Transform: загрузка в озеро и последующая обработка, подходит для больших объёмов и гибкой схемы."
        ),
        (
            "CAP-теорема.",
            "Невозможно одновременно обеспечить в распределённой системе согласованность (копии данных во все узлах одинаковы), доступность(независимо от повреждений системы, она всегда должна отвечать) и устойчивость к разделению(система должна продолжать работу, даже если часть узлов сломана и тд)."
        ),
        (
            "Концепция BASE.",
            " BASE означает: Basically Available (В основном доступный): Система гарантирует доступность данных, даже если некоторые узлы выходят из строя. Данные могут быть доступны не во всех репликах, но система в целом продолжает работать. Soft state (Мягкое состояние): Состояние системы может меняться со временем, даже без явных операций ввода-вывода. Это позволяет системе адаптироваться к изменяющимся требованиям и условиям. Eventually consistent (В конечном итоге согласованный): Данные в системе, в конечном итоге, станут согласованными, но не сразу после каждой операции записи. Согласованность может быть достигнута через некоторое время, когда все реплики будут обновлены."
        ),
        (
            "Аналитика данных. Технология CRISP-DM.",
            "Аналитика данных это процесс сбора, обработки, анализа и интерпетации данных для извлечения полезной инфы, которая будет нужна для принятия решений. Фазы CRISP-DM: понимание бизнеса, понимание данных, подготовка данных, моделирование, оценка, внедрение."
        ),
        (
            "Витрины данных. Типы витрин данных.",
            "Специализированные для отдела или предметной области, оптимизированные для конкретных аналитических запросов данные, обычно меньший объём, а также предметная ориентированность и разделение ответственности. Типы витрин данных: Зависимые: Эти витрины создаются на основе уже существующего хранилища данных. Они как бы вырезают нужный кусок из общей базы. Независимые: Эти витрины строятся отдельно, без привязки к основному хранилищу. Они могут быть полезны, когда нужно быстро создать хранилище для конкретной задачи. Гибридные: Сочетают в себе элементы зависимых и независимых витрин. Могут использовать данные из основного хранилища, но при этом иметь и свои, независимые данные. "
        ),
        (
            "OLAP-базы данных и OLTP-системы. Виды OLAP.",
            "OLTP(онлайн-обработка транзакций) – обработка транзакций в реальном времени, небольшие запросы, высокая скорость. OLAP(онлайн-аналитическая обработка) – нужна для сложного анализа данных и составления отчётов. Виды OLAP: 1) MOLAP - данные и результаты обработки храняться в спец. многомерных структурах 2)ROLAP - -//- в реляционных БД. 3) HOLAP - исп. разные хранилища для разных типов данных"
        ),
        (
            "Обучение с учителем и без учителя. Метрики качества. Обработка текста, фото- и видеоизображений, аудиоданных.",
            "С учителем – задачи классификации и регрессии с метками; алгоритмы: линейная регрессия, логистическая регрессия, деревья решений, SVM. Без учителя – кластеризация, снижение размерности, ассоциативный анализ; алгоритмы: k-средних, иерархическая кластеризация, PCA."
        ),
        (
            "Статистика и основные статистические характеристики и их оценки.",
            "Статистика изучает методы сбора, анализа, интерпретации и представления данных. Среднее арифметическое, медиана, мода, дисперсия, стандартное отклонение, квантили и процентили, межквартильный размах (IQR), скошенность, эксцесс. Для выборки дисперсия считается с n-1."
        ),
        (
            "Нормальное распределение. Центральная предельная теорема.",
            "Нормальное распределение – симметричное «колоколоподобное» распределение. Центральная предельная теорема – сумма большого числа независимых величин стремится к нормальному распределению."
        ),
        (
            "Бутстрэп. Гипотезы. Проверка гипотез. Статистические критерии. Ошибки статистического теста.",
            "Бутстрэп – многократная выборка с возвращением для оценки надёжности статистик. Нулевая гипотеза: Предположение, которое принимается за истинное, если нет достаточных доказательств для его опровержения. Альтернативная гипотеза: Предположение, которое противоречит нулевой гипотезе и считается верным, если нулевая гипотеза отвергнута. Ошибка I рода: Отвергается верная нулевая гипотеза. Ошибка II рода: Не отвергается неверная нулевая гипотеза."
        ),
        (
            "Визуализация данных. Виды визуализаций. Разведочный анализ данных. Цели разведочного анализа. Особенности диаграмм и графиков.",
            "Гистограммы и boxplot для распределений, scatter plot для пар числовых, линейные графики для временных рядов, столбчатые диаграммы для категорий, матрица корреляций. Один график – одна мысль; обязательные подписи и единицы измерения."
        ),
        (
            "Дашборды. Ключевые концепции.",
            "Набор виджетов с графиками и числами, фильтры по времени и другим измерениям, дрилл-даун для детализации, настройка частоты обновления (real-time или периодическая)."
        ),
        (
            "BI-системы. Основные функции. Примеры BI-систем.",
            "Сбор данных, ETL/ELT, аналитика, дашборды, совместная работа и отчёты. Примеры: Microsoft Power BI, Tableau, Qlik Sense, Metabase, Redash, Yandex DataLens."
        ),
        (
            "Распределённые системы. Типы обработки данных. Закон Амдала. Модель Master-Slave.",
            "Разбиение задач на узлы, масштабирование, отказоустойчивость (есть обработка в режиме реального времени, пакетная, потоковая). Закон Амдала – ускорение программы при распараллеливании ограничено временем, которое занимает последовательная часть этой программы. Master-slave – главный узел управляет слейвами."
        ),
        (
            "Модель NoSQL. Виды баз данных NoSQL.",
            "Key-Value – Redis, DynamoDB; Document – MongoDB, Couchbase; Column-Family – Cassandra, HBase; Graph – Neo4j, JanusGraph."
        ),
        (
            "Озёра данных.",
            "Озеро данных — это централизованное хранилище, которое принимает, хранит и позволяет обрабатывать большие объемы данных в исходной форме. Она может обрабатывать все типы данных, которые затем используются для анализа больших данных, машинного обучения и других форм интеллектуальных действий."
        ),
        (
            "Экосистема Hadoop.",
            "Это набор инструментов, библиотек и фреймворков, разработанных для хранения и обработки больших объемов данных (Big Data) в распределенной среде. Hadoop использует файловую систему HDFS для распределения данных на несколько серверов. YARN отвечает за распределение ресурсов между кластерами и планирует задачи. Map Reduce - позволяет выполняет сложные вычисления над данными. Но есть и ещё интрументы, которые расширают функциональность Hadoop и упрощяет работу с данными.  "
        ),
        (
            "Облачные вычисления и сервисы.",
            "IaaS – виртуальные машины и сети; PaaS – платформа для разработки и развертывания приложений; SaaS – готовые сервисы по подписке."
        ),
        (
            "Loginom. Сценарий. Компоненты и их настройки.",
            "Loginom – визуальная no-code платформа для ETL, анализа и ML. Сценарий – граф из блоков; компоненты: импорт, фильтрация, группировка, модели (деревья решений, регрессия), экспорт; настройка через формы и запуск по расписанию."
        ),
        (
            "Yandex DataLens.",
            "Облачный сервис визуализации и дашбордов. Подключается к ClickHouse, PostgreSQL, S3; есть drag-and-drop конструктор датасетов и SQL; поддерживает интерактивные фильтры и дрилл-даун; бесплатная визуализация, оплата за прочитанные строки ClickHouse."
        ),
    ]

    # Перемешиваем список вопросов
    random.shuffle(qa)

    for idx, (question, answer) in enumerate(qa, start=1):
        input(f"\nВопрос {idx}:\n{question}\n\n(Нажмите Enter, чтобы увидеть ответ)")
        print(f"\nОтвет {idx}:\n{answer}")
        if idx < len(qa):
            input("\n(Нажмите Enter для следующего вопроса)")

    print("\nВсе вопросы пройдены. Удачи в повторении!")

if __name__ == "__main__":
    main()
